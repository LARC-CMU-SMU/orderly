<project name="orderly" default="jar">
  <property file="${basedir}/build.properties" />
  <property name="name" value="orderly"/>
  <property name="Name" value="Orderly"/>
  <property name="version" value="0.9"/>
  <property name="final.name" value="${name}-${version}"/>

  <property name="src.dir" value="${basedir}/src"/>  	
  <property name="src.java" value="${src.dir}/java"/>  	
  <property name="src.test" location="${src.dir}/test"/>
  <property name="src.example" location="${src.dir}/example"/>
  <property name="lib.dir" value="${basedir}/lib"/>

  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.test" location="${build.dir}/test"/>
  <property name="build.example" location="${build.dir}/example"/>
  <property name="build.lib" location="${build.dir}/lib"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.javadoc" value="${build.docs}/api"/>

  <property name="test.output" value="no"/>
  <property name="test.timeout" value="600000"/>
  <property name="test.log.dir" value="${build.test}/logs"/>
  <property name="test.junit.output.format" value="plain"/>
  <property name="test.random.seed" value="1298445547276"/>
  <property name="test.random.count" value="100000"/>
  <property name="test.random.maxstrlength" value="1024"/>
  <property name="test.random.maxfieldcount" value="32"/>
  <property name="test.random.maxfieldnest" value="4"/>
  <property name="test.random.maxbits" value="2048"/>
  <property name="test.random.maxredzone" value="16"/>

  <property name="dist.dir" value="${build.dir}/${final.name}"/>

  <property name="javadoc.link.java"
    value="http://download.oracle.com/javase/6/docs/api/"/>
  <property name="javadoc.packages" value="com.gotometrics.orderly.*"/>

  <property name="javac.debug" value="on"/>
  <property name="javac.optimize" value="on"/>
  <property name="javac.deprecation" value="off"/>
  <property name="javac.version" value="1.6"/>
  <property name="javac.args" value=""/>
  <property name="javac.args.warnings" value="-Xlint:unchecked"/>

  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <fileset dir="${lib.dir}" includes="*.jar"/>
  </path>

  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.example}"/>

    <mkdir dir="${build.lib}"/>
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}" />
    </copy>
  </target>

  <target name="compile" depends="init">
    <javac 
     srcdir="${src.java}"	
     destdir="${build.classes}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     target="${javac.version}"
     source="${javac.version}"
     deprecation="${javac.deprecation}">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="jar" depends="compile, compile-test, compile-example">
    <jar jarfile="${build.dir}/${final.name}.jar" basedir="${build.classes}"/>
    <jar jarfile="${build.dir}/${final.name}-test.jar"  
         basedir="${build.test}"/>
    <jar jarfile="${build.dir}/${final.name}-example.jar"  
         basedir="${build.example}"/>
  </target>

  <target name="package" depends="jar,javadoc">
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset dir="${build.dir}">
        <include name="${final.name}.jar" />
        <include name="${final.name}-test.jar" />
        <include name="${final.name}-example.jar" />
      </fileset>
    </copy>

    <mkdir dir="${dist.dir}/lib"/>
    <copy todir="${dist.dir}/lib">
      <fileset dir="${build.lib}" />
    </copy>

    <mkdir dir="${dist.dir}/docs" />
    <copy todir="${dist.dir}/docs">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${dist.dir}">
      <fileset dir="${basedir}">
        <include name="*.txt" />
        <include name="build.xml" />
      </fileset>
    </copy>

    <mkdir dir="${dist.dir}/src" />
    <copy todir="${dist.dir}/src">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <target name="tar" depends="package">
    <tar compression="gzip" longfile="gnu" 
         destfile="${build.dir}/${final.name}.tar.gz"
         basedir="${dist.dir}"/>
  </target>

  <target name="binary" depends="package">
    <tar compression="gzip" longfile="gnu" 
         destfile="${build.dir}/${final.name}-bin.tar.gz"
         basedir="${dist.dir}" 
         excludes="${dist.dir}/src/**,${dist.dir}/docs/**"/>
  </target>

  <target name="javadoc">
    <mkdir dir="${build.javadoc}"/>
    <javadoc
      packagenames="com.gotometrics.orderly.*"
      destdir="${build.javadoc}"
      author="true"
      version="true"
      use="true"
      windowtitle="${Name} ${version} API"
      doctitle="${Name} ${version} API"
      >
    	<packageset dir="${src.java}"/>
        <link href="${javadoc.link.java}"/>
        <classpath >
          <path refid="classpath" />
          <pathelement path="${java.class.path}"/>
        </classpath>
    </javadoc>
  </target>	

  <path id="test.classpath">
    <pathelement location="${build.test}" />
    <path refid="classpath"/>
  </path>

  <path id="example.classpath">
    <pathelement location="${build.example}" />
    <path refid="classpath"/>
  </path>

  <target name="compile-test" depends="compile">
    <javac 
     srcdir="${src.test}"	
     includes="**/*.java"
     destdir="${build.test}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     target="${javac.version}"
     source="${javac.version}"
     deprecation="${javac.deprecation}">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="test.classpath"/>
    </javac>
  </target>

  <target name="compile-example" depends="compile">
    <javac 
     srcdir="${src.example}"	
     includes="**/*.java"
     destdir="${build.example}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     target="${javac.version}"
     source="${javac.version}"
     deprecation="${javac.deprecation}">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="example.classpath"/>
    </javac>
  </target>

  <target name="test" depends="compile-test">
    <delete dir="${test.log.dir}"/>
    <mkdir dir="${test.log.dir}"/>
    <junit
      printsummary="yes" showoutput="${test.output}" 
      haltonfailure="no" fork="yes" maxmemory="512m"
      errorProperty="tests.failed" failureProperty="tests.failed"
      timeout="${test.timeout}">
      
      <sysproperty key="test.random.seed" value="${test.random.seed}"/>
      <sysproperty key="test.random.count" value="${test.random.count}"/>
      <sysproperty key="test.random.maxstrlength" 
                   value="${test.random.maxstrlength}"/>
      <sysproperty key="test.random.maxredzone" 
                   value="${test.random.maxredzone}"/>
      
      <classpath refid="test.classpath"/>
      <formatter type="${test.junit.output.format}" />
      <batchtest todir="${build.test}" unless="testcase">
        <fileset dir="${src.test}"
                 includes="**/Test*.java" excludes="**/${test.exclude}.java" />
      </batchtest>
      <batchtest todir="${build.test}" if="testcase">
        <fileset dir="${src.test}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>
</project>
